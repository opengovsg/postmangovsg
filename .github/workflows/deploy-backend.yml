name: AWS Deploy
on:
  workflow_call:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        type: string
      aws-account-id:
        description: "AWS account ID to use"
        required: true
        type: string
      cicd-role:
        description: "AWS IAM role to assume by GitHub action runner"
        required: true
        type: string
      ecr-repository:
        description: "ECR repository to push image to"
        required: true
        type: string
      ecs-cluster-name:
        description: "ECS cluster to deploy to"
        required: true
        type: string
      ecs-service-name:
        description: "ECS service for server"
        required: true
        type: string
      ecs-container-name:
        description: "Name of container in ECS task definition"
        required: true
        type: string
      codedeploy-application:
        description: "CodeDeploy application to use"
        required: true
        type: string
      codedeploy-deployment-group:
        description: "CodeDeploy deployment group to use"
        required: true
        type: string
      release-version:
        description: "Version of release"
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build and push image to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.cicd-role }}
          role-session-name: github-action-application-deploy
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Construct ECR Image URI
        id: ecr-image-uri
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
          IMAGE_TAG: ${{ inputs.environment }}-${{ inputs.release-version }}
        run: echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and push image to ECR
        id: build-image
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker build . -t ${{ steps.ecr-image-uri.outputs.image }} -f backend/Dockerfile
          docker push ${{ steps.ecr-image-uri.outputs.image }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.cicd-role }}
          role-session-name: github-action-application-deploy
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Construct ECR Image URI
        id: ecr-image-uri
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
          IMAGE_TAG: ${{ inputs.environment }}-${{ inputs.release-version }}
        run: echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Replace variables in task definition file
        run: |
          sed -i 's/<AWS_ACCOUNT_ID>/${{ inputs.aws-account-id }}/g' backend/ecs-task-definition.json
          sed -i 's/<ENVIRONMENT>/${{ inputs.environment }}/g' backend/ecs-task-definition.json
          sed -i 's/<AWS_ACCOUNT_ID>/${{ inputs.aws-account-id }}/g' backend/appspec.yml
          sed -i 's/<ENVIRONMENT>/${{ inputs.environment }}/g' backend/appspec.yml

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: server-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: backend/ecs-task-definition.json
          container-name: ${{ inputs.ecs-container-name }}
          image: ${{ steps.ecr-image-uri.outputs.image }}

      - name: Deploy Amazon ECS task definition to server
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.server-task-def.outputs.task-definition }}
          cluster: ${{ inputs.ecs-cluster-name }}
          service: ${{ inputs.ecs-service-name }}
          codedeploy-appspec: backend/appspec.yml
          codedeploy-application: ${{ inputs.codedeploy-application }}
          codedeploy-deployment-group: ${{ inputs.codedeploy-deployment-group }}
          wait-for-service-stability: true
