name: Deploy antivirus-scanner to AWS Elastic Container Service
on:
  push:
    branches:
      - staging
      - master

# Making sure that the current deployment is completed before the next one
concurrency: deploy-antivirus-scanner-${{ github.ref }}
env:
  # Update this common config
  DIRECTORY: services/antivirus-scanner

jobs:
  set_environment:
    outputs:
      current_env: "${{ steps.set-environment.outputs.current_env }}"
    runs-on: ubuntu-latest
    steps:
      - id: set-environment
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "::set-output name=current_env::production"
          else
            echo "::set-output name=current_env::staging"
          fi

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Lint lock file
        run: cd $DIRECTORY && npx lockfile-lint --type npm --path package-lock.json -o "https:" -o "file:" --allowed-hosts npm
      - name: Lint app code
        run: |
          cd $DIRECTORY
          npm ci
          npm run build
          npm run lint-no-fix

  build_application:
    needs: [set_environment, lint]
    environment:
      name: ${{ needs.set_environment.outputs.current_env }}
    env:
      IMAGE_TAG: "github-actions-antivirus-scanner-${{ github.sha }}-${{ github.run_id }}-${{github.run_attempt}}"
      BRANCH: ${{ needs.set_environment.outputs.current_env }}
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY: ${{ secrets.REPO }}
        run: |
          cd $DIRECTORY
          docker build -f Dockerfile -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REPOSITORY:$BRANCH
          docker push -a $ECR_REPOSITORY
          echo "::set-output name=image::$IMAGE_TAG"
