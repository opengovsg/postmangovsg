name: Deploy serverless-database-backup
on:
  push:
    branches: # There should be 2 environments in github actions secrets: staging, production. This is different from the DEPLOY_ENV secret which corresponds to elastic beanstalk environment name
      - github-actions-test-lambda

jobs:
  set_environment:
    outputs:
      current_env: ${{ steps.set-environment.outputs.current_env }}
    runs-on: ubuntu-latest
    steps:
      - id: set-environment
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "::set-output name=current_env::production"
          else
             echo "::set-output name=current_env::staging"
          fi

  build_deploy_application:
    needs: set_environment
    environment:
      name: ${{ needs.set_environment.outputs.current_env }}
    env:
      BRANCH: ${{ needs.set_environment.outputs.current_env }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
          cache: 'npm'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Build  
        id: build-lambda
        env:
          # Update this config
          FUNCTION_NAME: "database-backup-${{ needs.set_environment.outputs.current_env }}"
          DIRECTORY: serverless/database-backup
          ZIP_FILE: code.zip
          PG_VERSION: ${{ secrets.PG_VERSION }}
        run: |
          cd $DIRECTORY
          npm ci 
          npm run build:docker
          sudo zip -qr $ZIP_FILE build package.json node_modules/
          echo "::set-output name=zip_path::$DIRECTORY/$ZIP_FILE"
          echo "::set-output name=function_name::$FUNCTION_NAME"

      - name: Check if lambda can be updated (1)
        env:
          FUNCTION_NAME: ${{ steps.build-lambda.outputs.function_name }}
        run: |
          result=$(aws lambda get-function --function-name $FUNCTION_NAME --query 'Configuration.[State, LastUpdateStatus]')
          echo "$result"
          if [[ ! $result =~ "Successful" ]] || [[ ! $result =~ "Active" ]]; then
              sleep 10;
          fi

      - name: Update function code
        env:
          FUNCTION_NAME: ${{ steps.build-lambda.outputs.function_name }}
          ZIP_PATH: ${{ steps.build-lambda.outputs.zip_path }} 
        run: |
          aws lambda update-function-code --function-name=$FUNCTION_NAME \
          --zip-file=fileb://$ZIP_PATH --publish


      - name: Check if lambda can be updated (2)
        env:
          FUNCTION_NAME: ${{ steps.build-lambda.outputs.function_name }}
        run: |
          result=$(aws lambda get-function --function-name $FUNCTION_NAME --query 'Configuration.[State, LastUpdateStatus]')
          echo "$result"
          if [[ ! $result =~ "Successful" ]] || [[ ! $result =~ "Active" ]]; then
              sleep 10;
          fi

      - name: Update function config
        env:
          # Update this config
          DIRECTORY: serverless/database-backup
          # Update the configuration
          ROLE: ${{ secrets.BACKUP_ROLE }}
          RUNTIME: nodejs12.x
          HANDLER: build/index.handler
          TIMEOUT: 900
          MEMORY_SIZE: 2048
          FUNCTION_NAME: ${{ steps.build-lambda.outputs.function_name }}
          TAG: github-actions-${{ github.sha }}-${{ github.run_id }}-${{github.run_attempt}}
          # Update env vars
          DB_URI: ${{ secrets.BACKUP_DB_URI }}
          DB_USE_IAM: ${{ secrets.DB_USE_IAM }}
          BACKUP_BUCKET_NAME: ${{ secrets.BACKUP_BUCKET_NAME }}
          GCP_SECRET_NAME: ${{ secrets.BACKUP_GCP_SECRET_NAME }}
          KEY_ENCRYPTION_PUBLIC_KEY: ${{ secrets.BACKUP_PUBLIC_KEY }}
          SENTRY_DSN: ${{ secrets.SERVERLESS_SENTRY_DSN }}
          CRONITOR_CODE: ${{ secrets.BACKUP_CRONITOR_CODE }}
        run: |
          aws lambda update-function-configuration --function-name=$FUNCTION_NAME \
          --role=$ROLE --description=$TAG --timeout=$TIMEOUT --memory-size=$MEMORY_SIZE --runtime=$RUNTIME --handler=$HANDLER \
          --environment "Variables={DB_URI=$DB_URI,DB_USE_IAM=$DB_USE_IAM,BACKUP_BUCKET_NAME=$BACKUP_BUCKET_NAME,GCP_SECRET_NAME=$GCP_SECRET_NAME,KEY_ENCRYPTION_PUBLIC_KEY=$KEY_ENCRYPTION_PUBLIC_KEY,SENTRY_DSN=$SENTRY_DSN,CRONITOR_CODE=$CRONITOR_CODE}"