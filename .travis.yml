language: node_js
node_js:
  - lts/*

services:
  - docker

cache: npm

# Deploy from Dockerfile
jobs:
  include:
    - name: backend
      before_install:
        - cd $TRAVIS_BUILD_DIR/backend
      install:
        - npm ci
      script:
        - npm run lint-no-fix
        - npm run test
      before_deploy:
        - cd $TRAVIS_BUILD_DIR/backend && ./before-deploy.sh
      deploy:
        - provider: elasticbeanstalk
          edge: true
          skip_cleanup: true
          access_key_id: $AWS_ACCESS_KEY_ID
          secret_access_key: $AWS_SECRET_ACCESS_KEY
          region: $AWS_DEFAULT_REGION
          app: "postmangovsg"
          env: "postmangovsg-staging-40ffadb"
          bucket_name: "postmangovsg-elasticbeanstalk-appversion"
          on:
            branch: $STAGING_BRANCH
        - provider: elasticbeanstalk
          edge: true
          skip_cleanup: true
          access_key_id: $AWS_ACCESS_KEY_ID
          secret_access_key: $AWS_SECRET_ACCESS_KEY
          region: $AWS_DEFAULT_REGION
          app: "postmangovsg"
          env: "postmangovsg-production-4d26c37"
          bucket_name: "postmangovsg-elasticbeanstalk-appversion"
          on:
            branch: $PRODUCTION_BRANCH
    - name: worker
      before_install:
        - cd $TRAVIS_BUILD_DIR/worker
      install:
        - npm ci
      script:
        - npm run lint-no-fix
      before_deploy:
        - cp -R ../modules ./
      deploy:
        - provider: script
          skip_cleanup: true
          script: ./deploy.sh postmangovsg-workers staging-sending staging-logging
          on:
            branch: $STAGING_BRANCH
            condition: "$DEPLOY_WORKER = true"
        - provider: script
          skip_cleanup: true
          script: ./deploy.sh postmangovsg-workers prod-sending prod-logging
          on:
            branch: $PRODUCTION_BRANCH
            condition: "$DEPLOY_WORKER = true"
    - name: frontend
      before_install:
        - cd $TRAVIS_BUILD_DIR/frontend
      install:
        - npm install
      script:
        - npm run compile
        - npm run lint-no-fix
        - CI=false npm run build
    - name: serverless-unsubscribe-digest
      before_deploy:
        - cd $TRAVIS_BUILD_DIR/serverless/unsubscribe-digest
        - npm install && npm run build
        - zip -qr code.zip build src package.json node_modules/
      deploy:
        - provider: lambda
          edge: true
          function_name: unsubscribe-digest-production
          region: $AWS_DEFAULT_REGION
          role: $PRODUCTION_UNSUBSCRIBE_ROLE
          runtime: nodejs12.x
          module_name: build/index
          handler_name: handler
          timeout: 600
          memory_size: 256
          publish: true
          zip: "../unsubscribe-digest/code.zip"
          on:
            branch: $PRODUCTION_BRANCH
          environment_variables:
            - DB_URI=$PRODUCTION_UNSUBSCRIBE_DIGEST_DB_URI
            - DB_READ_REPLICA_URI=$PRODUCTION_UNSUBSCRIBE_DIGEST_DB_READ_REPLICA_URI
            - DB_USE_IAM=$PRODUCTION_DB_USE_IAM
            - SENTRY_DSN=$SERVERLESS_SENTRY_DSN
            - SES_FROM=$PRODUCTION_UNSUBSCRIBE_DIGEST_SES_FROM
            - SES_HOST=$PRODUCTION_UNSUBSCRIBE_DIGEST_SES_HOST
            - SES_PASS=$PRODUCTION_UNSUBSCRIBE_DIGEST_SES_PASS
            - SES_USER=$PRODUCTION_UNSUBSCRIBE_DIGEST_SES_USER
            - SES_PORT=$PRODUCTION_UNSUBSCRIBE_DIGEST_SES_PORT
            - UNSUBSCRIBE_GUIDE_URL=$UNSUBSCRIBE_GUIDE_URL
        - provider: lambda
          edge: true
          function_name: unsubscribe-digest-staging
          region: $AWS_DEFAULT_REGION
          role: $STAGING_UNSUBSCRIBE_ROLE
          runtime: nodejs12.x
          module_name: build/index
          handler_name: handler
          timeout: 600
          memory_size: 256
          publish: true
          zip: "../unsubscribe-digest/code.zip"
          on:
            branch: $STAGING_BRANCH
          environment_variables:
            - DB_URI=$STAGING_UNSUBSCRIBE_DIGEST_DB_URI
            - DB_READ_REPLICA_URI=$STAGING_UNSUBSCRIBE_DIGEST_DB_READ_REPLICA_URI
            - DB_USE_IAM=$STAGING_DB_USE_IAM
            - SENTRY_DSN=$SERVERLESS_SENTRY_DSN
            - NODE_ENV=staging
            - SES_FROM=$STAGING_UNSUBSCRIBE_DIGEST_SES_FROM
            - SES_HOST=$STAGING_UNSUBSCRIBE_DIGEST_SES_HOST
            - SES_PASS=$STAGING_UNSUBSCRIBE_DIGEST_SES_PASS
            - SES_USER=$STAGING_UNSUBSCRIBE_DIGEST_SES_USER
            - SES_PORT=$STAGING_UNSUBSCRIBE_DIGEST_SES_PORT
            - UNSUBSCRIBE_GUIDE_URL=$UNSUBSCRIBE_GUIDE_URL
    - name: serverless-database-backup
      before_deploy:
        - cd $TRAVIS_BUILD_DIR/serverless/database-backup
        - npm run build:docker
      deploy:
        - provider: lambda
          edge: true
          function_name: database-backup-production
          region: $AWS_DEFAULT_REGION
          role: $PRODUCTION_BACKUP_ROLE
          runtime: nodejs12.x
          module_name: build/index
          handler_name: handler
          timeout: 600
          memory_size: 512
          publish: true
          zip: "../database-backup/code.zip"
          on:
            branch: $PRODUCTION_BRANCH
          environment_variables:
            - DB_URI=$PRODUCTION_BACKUP_DB_URI
            - DB_USE_IAM=$PRODUCTION_DB_USE_IAM
            - BACKUP_BUCKET_NAME=$PRODUCTION_BACKUP_BUCKET_NAME
            - GCP_SECRET_NAME=$PRODUCTION_BACKUP_GCP_SECRET_NAME
            - KEY_ENCRYPTION_PUBLIC_KEY=$PRODUCTION_BACKUP_PUBLIC_KEY
            - SENTRY_DSN=$SERVERLESS_SENTRY_DSN
        - provider: lambda
          edge: true
          function_name: database-backup-staging
          region: $AWS_DEFAULT_REGION
          role: $STAGING_BACKUP_ROLE
          runtime: nodejs12.x
          module_name: build/index
          handler_name: handler
          timeout: 600
          memory_size: 512
          publish: true
          zip: "../database-backup/code.zip"
          on:
            branch: $STAGING_BRANCH
          environment_variables:
            - NODE_ENV=staging
            - DB_URI=$STAGING_BACKUP_DB_URI
            - DB_USE_IAM=$STAGING_DB_USE_IAM
            - BACKUP_BUCKET_NAME=$STAGING_BACKUP_BUCKET_NAME
            - GCP_SECRET_NAME=$STAGING_BACKUP_GCP_SECRET_NAME
            - KEY_ENCRYPTION_PUBLIC_KEY=$STAGING_BACKUP_PUBLIC_KEY
            - SENTRY_DSN=$SERVERLESS_SENTRY_DSN
    - name: serverless-eb-env-update
      before_deploy:
        - cd $TRAVIS_BUILD_DIR/serverless/eb-env-update
        - npm install && npm run build && npm prune --production
        - zip -qr code.zip build package.json node_modules/
      deploy:
        - provider: lambda
          edge: true
          function_name: eb-env-update-production
          region: $AWS_DEFAULT_REGION
          role: $PRODUCTION_EBENVUPDATE_ROLE
          runtime: nodejs12.x
          module_name: build/index
          handler_name: handler
          timeout: 10
          memory_size: 128
          publish: true
          zip: "../eb-env-update/code.zip"
          on:
            branch: $PRODUCTION_BRANCH
          environment_variables:
            - NODE_ENV=production
            - SECRET_ID=$PRODUCTION_SECRET_ID
            - SENTRY_DSN=$SERVERLESS_SENTRY_DSN
        - provider: lambda
          edge: true
          function_name: eb-env-update-staging
          region: $AWS_DEFAULT_REGION
          role: $STAGING_EBENVUPDATE_ROLE
          runtime: nodejs12.x
          module_name: build/index
          handler_name: handler
          timeout: 10
          memory_size: 128
          publish: true
          zip: "../eb-env-update/code.zip"
          on:
            branch: $STAGING_BRANCH
          environment_variables:
            - NODE_ENV=staging
            - SECRET_ID=$STAGING_SECRET_ID
            - SENTRY_DSN=$SERVERLESS_SENTRY_DSN
    - name: root
      install:
        - npm install --ignore-scripts
      script:
        - npm run lint-no-fix
